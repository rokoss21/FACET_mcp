[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "facet-mcp-server"
version = "0.1.0"
description = "FACET MCP Server - Agent-First AI Tooling"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Emil Rokossovskiy", email = "ecsiar@gmail.com"}
]
maintainers = [
    {name = "Emil Rokossovskiy", email = "ecsiar@gmail.com"}
]
keywords = ["ai", "agents", "mcp", "facet", "text-processing", "simd", "websocket"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries",
    "Topic :: Text Processing",
]
requires-python = ">=3.9"
dependencies = [
    "websockets>=12.0",
    "jsonschema>=4.0",
    "uvloop>=0.17.0; sys_platform != 'win32'",
    "numba>=0.56.0",
    "numpy>=1.21.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio",
    "pytest-cov",
    "black",
    "isort",
    "flake8",
    "mypy",
    "pre-commit"
]
docs = [
    "sphinx",
    "sphinx-rtd-theme",
    "myst-parser"
]
all = [
    "facet-mcp-server[dev,docs]"
]

[project.urls]
Homepage = "https://github.com/rokoss21/FACET_mcp"
Documentation = "https://facet-mcp-server.readthedocs.io/"
Repository = "https://github.com/rokoss21/FACET_mcp"
Issues = "https://github.com/rokoss21/FACET_mcp/issues"
Changelog = "https://github.com/rokoss21/FACET_mcp/blob/main/CHANGELOG.md"

[project.scripts]
facet-mcp = "facet_mcp.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["facet_mcp*"]

[tool.setuptools.package-data]
facet_mcp = ["*.txt", "*.md"]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config --cov=facet_mcp --cov-report=html --cov-report=term-missing"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests"
]

[tool.coverage.run]
source = ["facet_mcp"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
